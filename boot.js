// "‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ —ï—ÉŒ∑—Ç–ΩœÉ—èiŒ± –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé"
// ‚ïî‚ßâ‡ºª [ ùêíùê≤ùêßùê≠ùê°ùê®ùê´ùê¢ùêöüïäÔ∏èùêåùêÆùê•ùê≠ùê¢ùêÉùêûùêØùê¢ùêúùêû ùêÄùêèùêà ] ùê¢ùê¨ ùêö ùêñùê°ùêöùê≠ùê¨ùêöùê©ùê© ùêåùêÆùê•ùê≠ùê¢ùêèùêÆùê´ùê©ùê®ùê¨ùêû-ùêîùê¨ùêûùê´ùêõùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùêåùê®ùêùùêûùê´ùêöùê≠ùê¢ùê®ùêß,ùêÄùêÆùê≠ùê®ùê¶ùêöùê≠ùê¢ùê®ùêß ùêöùêßùêù ùüèùüéùüé+ ùê¶ùê®ùê´ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨!
// ‚ïë      üêûùêÉùêûùêØùêûùê•ùê®ùê©ùêûùê´: +918436686758, +918250889325
// ‚ïë
// ‚ïë We won't be responsible for any kind of ban due to this bot.
// ‚ïë Synthoria was made for fun purpose and to make group management easier.
// ‚ïë It's your concern if you spam and gets your account banned.
// ‚ïë Also, Forks won't be entertained.
// ‚ïë If you fork this repo and edit plugins, it's your concern for further updates.
// ‚ïë Forking Repo is fine. But if you edit something we will not provide any help.
// ‚ïë In short, Fork At Your Own Risk.
// ‚ïö‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ —ï—ÉŒ∑—Ç–ΩœÉ—èiŒ± –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé"
console.clear();
const fs = require("fs");
const cL = require("chalk");
const yargs = require("yargs");
const { join } = require("path");
const { say } = require("cfonts");
const mFolders = fs.readdirSync("./routes");
const { createInterface } = require("readline");
const { watchFile, unwatchFile } = require("fs");
const { setupMaster, fork } = require("cluster");
const rl = createInterface(process.stdin, process.stdout);

say("VLKYRE BOT\nWhatsApp Multi Device", {
  font: "chrome",
  align: "center",
  gradient: ["red", "yellow"],
});
say(`~ by magneum`, {
  font: "console",
  align: "center",
  gradient: ["green", "red"],
});

function showCommands(path) {
  say("‚ú≠ Loading Commands From Folders ‚ú≠", {
    font: "console",
    align: "left",
    gradient: ["red", "blue"],
  });
  for (const cFolders of mFolders) {
    const cFiles = fs
      .readdirSync(`./${path}/${cFolders}`)
      .filter((cFile) => cFile.endsWith(".js"));

    if (cFolders === "‚öôÔ∏èSystem") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "‚≠ïYTFilter") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üçÅ·¥è·¥°…¥·¥á Ä") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üçëHentai") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üêâEmotions") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üëÖNSFW") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üíóCommands") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üí∞Games") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üì¢aFilter") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üì•Downloader") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üìºConversion") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üîéSearches") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üî∞Group") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "üñºÔ∏èPhotogenic") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    } else if (cFolders === "ü¶ÑSFW") {
      console.log(
        cL.bgGreen(cL.black("> " + cFolders)),
        cL.yellow("  | " + cFiles)
      );
    }
  }
}
("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ —ï—ÉŒ∑—Ç–ΩœÉ—èiŒ± –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
var isRunning = false;
function ignite(cFile) {
  if (isRunning) return;
  isRunning = true;
  let args = [join(__dirname, cFile), ...process.argv.slice(2)];
  setupMaster({
    exec: args[0],
    args: args.slice(1),
  });
  let p = fork();
  p.on("message", (data) => {
    console.log(cL.bgGreen(cL.black("[RECEIVED]")), cL.yellow(data));
    switch (data) {
      case "reset":
        p.process.kill();
        isRunning = false;
        ignite.apply(this, arguments);
        break;
      case "uptime":
        p.send(process.uptime());
        break;
    }
  });
  p.on("exit", (_, code) => {
    isRunning = false;
    console.error(cL.bgRed("‚ùå An unexpected error occurred:" + _));
    p.process.kill();
    isRunning = false;
    ignite.apply(this, arguments);
    if (code === 0) return;
    watchFile(args[0], () => {
      unwatchFile(args[0]);
      ignite(cFile);
    });
  });
  let opts = new Object(
    yargs(process.argv.slice(2)).exitProcess(false).parse()
  );
  if (!opts["test"])
    if (!rl.listenerCount())
      rl.on("line", (line) => {
        p.emit("message", line.trim());
      });
}

showCommands("routes");
ignite("index.js", "uptime");
("‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ —ï—ÉŒ∑—Ç–ΩœÉ—èiŒ± –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé");
