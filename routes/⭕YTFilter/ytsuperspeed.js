//  ‚ïî‚ßâ‡ºª [ ùêïùê®ùê±ùêÅùê®ùê≠üïäÔ∏èùêåùêÆùê•ùê≠ùê¢ùêÉùêûùêØùê¢ùêúùêû ùêÄùêèùêà ] ùê¢ùê¨ ùêö ùêñùê°ùêöùê≠ùê¨ùêöùê©ùê© ùêåùêÆùê•ùê≠ùê¢ùêèùêÆùê´ùê©ùê®ùê¨ùêû - ùêîùê¨ùêûùê´ùêõùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùêåùê®ùêùùêûùê´ùêöùê≠ùê¢ùê®ùêß, ùêÄùêÆùê≠ùê®ùê¶ùêöùê≠ùê¢ùê®ùêß ùêöùêßùêù ùüèùüéùüé+ ùê¶ùê®ùê´ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨!
//  ‚ïë
//  ‚ïë We won't be responsible for any kind of ban due to this bot.
//  ‚ïë VoxBot was made for fun purpose and to make group management easier.
//  ‚ïë It's your concern if you spam and gets your account banned.
//  ‚ïë Also, Forks won't be entertained.
//  ‚ïë If you fork this repo and edit plugins, it's your concern for further updates.
//  ‚ïë Forking Repo is fine. But if you edit something we will not provide any help.
//  ‚ïë In short, Fork At Your Own Risk.
//  ‚ïë
//  ‚ïë üêûùêÉùêûùêØùêûùê•ùê®ùê©ùêûùê´: +918436686758, +918250889325
//  ‚ïö‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ V÷ÖxB‡ªêt –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé"
require("../../global.js");
const ppath = require("path");
const psname = ppath.basename(__filename);
const pfname = psname.slice(0, -3).toLowerCase();
module.exports = async (V÷ÖxB‡ªêt, vc–Ωa—Ç, update, store) => {
  try {
    if (!V÷ÖxB‡ªêt.args.join(" ")) {
      await V÷ÖxB‡ªêt.sendMessage(vc–Ωa—Ç.chat, {
        react: {
          text: "‚ùå",
          key: vc–Ωa—Ç.key,
        },
      });
      return vc–Ωa—Ç.reply(
        `*üò•Sorry:* _${V÷ÖxB‡ªêt.pushname || V÷ÖxB‡ªêt.Tname}_
*‚ùåError* 
> _No query provided!_

*‚ö°Usage*   
> _${V÷ÖxB‡ªêt.prefix}${pfname} song/link_`
      );
    }

    var gotArgument = V÷ÖxB‡ªêt.args.join(" ");
    if (gotArgument.includes("yout")) {
      if (!V÷ÖxB‡ªêt.TubeRegex.test(gotArgument)) {
        await V÷ÖxB‡ªêt.sendMessage(vc–Ωa—Ç.chat, {
          react: {
            text: "‚ùå",
            key: vc–Ωa—Ç.key,
          },
        });
        return vc–Ωa—Ç.reply(
          `*üò•Sorry:* _${V÷ÖxB‡ªêt.pushname || V÷ÖxB‡ªêt.Tname}_
*‚ùåError* 
> _No query provided!_

*‚ö°Usage* 
> _${V÷ÖxB‡ªêt.prefix}${pfname} song/link_`
        );
      }
    }

    V÷ÖxB‡ªêt.magfetch(
      V÷ÖxB‡ªêt,
      "https://magneum.vercel.app/api/youtube_sr?q=" + V÷ÖxB‡ªêt.args.join(" ")
    ).then(async (response) => {
      var mData = response.data;
      console.log(mData);
      await V÷ÖxB‡ªêt.imgB(
        V÷ÖxB‡ªêt,
        ŒΩ‚Ñì–∫hat,
        `*üîñHere, ${pfname} For ${V÷ÖxB‡ªêt.pushname}:*
*üçªTitle:* ${mData.youtube_search[0].TITLE}
*üôàViews:* ${mData.youtube_search[0].VIEWS}  
*‚è∞Duration:* ${mData.youtube_search[0].DURATION_FULL}
*üîóLink:* ${mData.youtube_search[0].LINK || "null"}
*üñäÔ∏èAuthor:* ${mData.youtube_search[0].AUTHOR_NAME || "null"}

*üìúDescription:* ${mData.youtube_search[0].DESCRIPTION}`,
        mData.youtube_search[0].HQ_IMAGE
      );

      V÷ÖxB‡ªêt.magfetch(
        V÷ÖxB‡ªêt,
        "https://magneum.vercel.app/api/youtube_dl?q=" +
          mData.youtube_search[0].TITLE +
          "&quality=music"
      ).then(async (response) => {
        var musicData = response.data;
        console.log(musicData);
        let audioConv =
          V÷ÖxB‡ªêt.between(3000, 4000) + musicData[0].YT_ID + ".mp3";
        V÷ÖxB‡ªêt.exec(
          `${V÷ÖxB‡ªêt.pathFFmpeg} -i ${musicData[0].quick_dl} -af 'atempo=3' ${audioConv}`,
          async (error) => {
            if (error) return V÷ÖxB‡ªêt.grab(V÷ÖxB‡ªêt, vc–Ωa—Ç, error);
            else
              await V÷ÖxB‡ªêt.sendMessage(
                vc–Ωa—Ç.chat,
                {
                  audio: V÷ÖxB‡ªêt.fs.readFileSync(`./${audioConv}`),
                  mimetype: "audio/mpeg",
                  fileName: mData.youtube_search[0].TITLE + ".mp3",
                  headerType: 4,
                  contextInfo: {
                    externalAdReply: {
                      title: mData.youtube_search[0].title,
                      body: "YT-Filter‚≠ïMade by magneum.",
                      renderLargerThumbnail: true,
                      thumbnailUrl: mData.youtube_search[0].thumbnail,
                      mediaUrl: mData.youtube_search[0].url,
                      mediaType: 1,
                      thumbnail: await V÷ÖxB‡ªêt.getBuffer(
                        mData.youtube_search[0].thumbnail
                      ),
                      sourceUrl: "https://bit.ly/magneum",
                    },
                  },
                },
                { quoted: vc–Ωa—Ç }
              );
            return await V÷ÖxB‡ªêt.fs.unlinkSync(`./${audioConv}`);
          }
        );
      });
    });
  } catch (error) {
    return V÷ÖxB‡ªêt.grab(V÷ÖxB‡ªêt, vc–Ωa—Ç, error);
  }
};
