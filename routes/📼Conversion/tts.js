//  ‚ïî‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ Í™ú·¥èx ô·¥è·¥õ –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±"
//  ‚ïë‚ßâ‡ºª ü§ñ ùêïùê®ùê±ùêÅùê®ùê≠üïäÔ∏è ùêåùêÆùê•ùê≠ùê¢ ùêÉùêûùêØùê¢ùêúùêû ü§ñ
//  ‚ïë  ùê¢ùê¨ ùêö ùêñùê°ùêöùê≠ùê¨ùêöùê©ùê© ùêåùêÆùê•ùê≠ùê¢ùêèùêÆùê´ùê©ùê®ùê¨ùêû - ùêîùê¨ùêûùê´ùêõùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùêåùê®ùêùùêûùê´ùêöùê≠ùê¢ùê®ùêß, ùêÄùêÆùê≠ùê®ùê¶ùêöùê≠ùê¢ùê®ùêß ùêöùêßùêù ùüèùüéùüé+ ùê¶ùê®ùê´ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨!
//  ‚ïë
//  ‚ïëüåü A versatile WhatsApp multi-purpose bot designed for group management and user convenience.
//  ‚ïëüöÄ Simplifies group management tasks and enhances the overall user experience.
//  ‚ïë‚ö†Ô∏è Please note: Engaging in spamming activities may lead to account suspension. Use responsibly!
//  ‚ïëüéâ VoxBot is intended for fun and convenience, but we're not responsible for account bans.
//  ‚ïëüîÄ Forking the repository is allowed, but customized versions or modified plugins are unsupported.
//  ‚ïë‚ö†Ô∏è Exercise caution and take responsibility for any modifications made to the bot.
//  ‚ïëüìû Need assistance or have issues? Contact our developers at +918436686758 and +918250889325.
//  ‚ïëüîÑ We'll continue providing updates and support for the original version of the bot.
//  ‚ïëüëâ Enjoy the features and functionality of VoxBot responsibly! Make the most out of your
//  ‚ïë   WhatsApp group management experience! üéâ
//  ‚ïë
//  ‚ïëüêû DEVELOPERS: +918436686758, +918250889325
//  ‚ïö‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ Í™ú·¥èx ô·¥è·¥õ –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±"
require("../../logger/global.js");
const ppath = require("path");
const psname = ppath.basename(__filename);
const pfname = psname.slice(0, -3).toLowerCase();
module.exports = async (Í™ú·¥èx ô·¥è·¥õ, ·¥†·¥èx·¥Ñ, update, store) => {
  try {
    if (!Í™ú·¥èx ô·¥è·¥õ.args) {
      await Í™ú·¥èx ô·¥è·¥õ.sendMessage(·¥†·¥èx·¥Ñ.chat, {
        react: {
          text: "‚ùå",
          key: ·¥†·¥èx·¥Ñ.key,
        },
      });
      return ·¥†·¥èx·¥Ñ.reply(
        `*üò•Sorry:* _${Í™ú·¥èx ô·¥è·¥õ.pushname || Í™ú·¥èx ô·¥è·¥õ.Tname}_

*‚ùåError* 
> _Could not find any text and code in context!_

*‚ö°Usage* 
> _${Í™ú·¥èx ô·¥è·¥õ.prefix}${pfname} text | language-code_`
      );
    }

    let text = "";
    let langCode = "en";
    for (var i = 0; i < Í™ú·¥èx ô·¥è·¥õ.args.length; i++) {
      if (Í™ú·¥èx ô·¥è·¥õ.args[i] == `=`) {
        langCode = Í™ú·¥èx ô·¥è·¥õ.args[i + 1];
        break;
      }
      text += Í™ú·¥èx ô·¥è·¥õ.args[i] + " ";
    }
    if (text.length > 200) {
      await Í™ú·¥èx ô·¥è·¥õ.sendMessage(·¥†·¥èx·¥Ñ.chat, {
        react: {
          text: "‚ùå",
          key: ·¥†·¥èx·¥Ñ.key,
        },
      });
      return ·¥†·¥èx·¥Ñ.reply(
        `*üò•Sorry:* _${Í™ú·¥èx ô·¥è·¥õ.pushname || Í™ú·¥èx ô·¥è·¥õ.Tname}_

*‚ùåError* 
> _Total characters should be less than 200!_

*‚ö°Usage* 
> _${Í™ú·¥èx ô·¥è·¥õ.prefix}${pfname} text | language-code_`
      );
    } else {
      Í™ú·¥èx ô·¥è·¥õ
        .axios({
          method: "get",
          url:
            "https://magneum.vercel.app/api/text2speech?q=" +
            Í™ú·¥èx ô·¥è·¥õ.args.join(" "),
          headers: {
            accept: "*/*",
            "accept-language": "en-US,en;q=0.9",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
          },
        })
        .then(async (response) => {
          var mData = response.data;
          console.log(mData);
          return await Í™ú·¥èx ô·¥è·¥õ.sendMessage(
            ·¥†·¥èx·¥Ñ.chat,
            {
              audio: { url: mData.meta.url },
              mimetype: "audio/mpeg",
              fileName: "TalkToSpeech" + ".mp3",
              headerType: 4,
              contextInfo: {
                externalAdReply: {
                  title: "üì¢Talk To Speech",
                  body: "‚ù£Ô∏èMade by xhadr.",
                  renderLargerThumbnail: true,
                  mediaUrl: "https://i.postimg.cc/qBSnwdzq/White.png",
                  mediaType: 1,
                  thumbnail: await Í™ú·¥èx ô·¥è·¥õ.getBuffer(
                    "https://i.postimg.cc/qBSnwdzq/White.png"
                  ),
                  sourceUrl: "https://bit.ly/xhadr",
                },
              },
            },
            { quoted: ·¥†·¥èx·¥Ñ }
          );
        });
    }
  } catch (error) {
    return Í™ú·¥èx ô·¥è·¥õ.grab(Í™ú·¥èx ô·¥è·¥õ, ·¥†·¥èx·¥Ñ, error);
  }
};
