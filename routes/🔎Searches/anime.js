//  ‚ïî‚ßâ‡ºª [ ùêïùê®ùê±ùêÅùê®ùê≠üïäÔ∏èùêåùêÆùê•ùê≠ùê¢ùêÉùêûùêØùê¢ùêúùêû ùêÄùêèùêà ] ùê¢ùê¨ ùêö ùêñùê°ùêöùê≠ùê¨ùêöùê©ùê© ùêåùêÆùê•ùê≠ùê¢ùêèùêÆùê´ùê©ùê®ùê¨ùêû - ùêîùê¨ùêûùê´ùêõùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùêåùê®ùêùùêûùê´ùêöùê≠ùê¢ùê®ùêß, ùêÄùêÆùê≠ùê®ùê¶ùêöùê≠ùê¢ùê®ùêß ùêöùêßùêù ùüèùüéùüé+ ùê¶ùê®ùê´ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨!
//  ‚ïë
//  ‚ïë We won't be responsible for any kind of ban due to this bot.
//  ‚ïë VoxBot was made for fun purpose and to make group management easier.
//  ‚ïë It's your concern if you spam and gets your account banned.
//  ‚ïë Also, Forks won't be entertained.
//  ‚ïë If you fork this repo and edit plugins, it's your concern for further updates.
//  ‚ïë Forking Repo is fine. But if you edit something we will not provide any help.
//  ‚ïë In short, Fork At Your Own Risk.
//  ‚ïë
//  ‚ïë üêûùêÉùêûùêØùêûùê•ùê®ùê©ùêûùê´: +918436686758, +918250889325
//  ‚ïö‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ Í™ú·¥èx ô·¥è·¥õ –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé"
require("../../global.js");
const ppath = require("path");
const psname = ppath.basename(__filename);
const pfname = psname.slice(0, -3).toLowerCase();
module.exports = async (Í™ú·¥èx ô·¥è·¥õ, ·¥†·¥èx·¥Ñ, update, store) => {
  try {
    if (!Í™ú·¥èx ô·¥è·¥õ.args.join(" ")) {
      await Í™ú·¥èx ô·¥è·¥õ.sendMessage(·¥†·¥èx·¥Ñ.chat, {
        react: {
          text: "‚ùå",
          key: ·¥†·¥èx·¥Ñ.key,
        },
      });
      return ·¥†·¥èx·¥Ñ.reply(
        `*üò•Sorry:* _${Í™ú·¥èx ô·¥è·¥õ.pushname || Í™ú·¥èx ô·¥è·¥õ.Tname}_

*‚ùåError* 
> _No query provided!_

*‚ö°Usage* 
> _${Í™ú·¥èx ô·¥è·¥õ.prefix}${pfname} manga-name_`
      );
    }

    Í™ú·¥èx ô·¥è·¥õ.magfetch(
      Í™ú·¥èx ô·¥è·¥õ,
      `https://magneum.vercel.app/api/anime?q=${pfname}`
    ).then(async (response) => {
      var viper = response.data;
      console.log(viper);
      Í™ú·¥èx ô·¥è·¥õ.imgB(
        Í™ú·¥èx ô·¥è·¥õ,
        ·¥†·¥èx·¥Ñ,
        `*üîñHere, ${pfname} For ${Í™ú·¥èx ô·¥è·¥õ.pushname || Í™ú·¥èx ô·¥è·¥õ.Tname}:* 
MAL_ID: ${viper.meta.id_mal}
TITLE: ${viper.meta.title}
EN_TITLE: ${viper.meta.en_title}
JP_TITLE: ${viper.meta.jp_title}
IMAGE: ${viper.meta.image}
PREMIERED: ${viper.meta.premiered}
WEBPAGE: ${viper.meta.webpage}
BROADCAST: ${viper.meta.broadcast}
GENRES: ${viper.meta.genres}
TYPE: ${viper.meta.type}
EPISODES: ${viper.meta.episodes}
RATING: ${viper.meta.rating}
AIRED: ${viper.meta.aired}
SCORE: ${viper.meta.score}
FAVORITES: ${viper.meta.favorites}
RANK: ${viper.meta.rank}
DURATION: ${viper.meta.duration}
STUDIOS: ${viper.meta.studios}
PRODUCERS: ${viper.meta.producers}
POPULARITY: ${viper.meta.popularity}
TOTAL_MEMBERS: ${viper.meta.members}
SCORE_STATUS: ${viper.meta.scores}
SOURCE: ${viper.meta.source}
SYNONYMS: ${viper.meta.synonyms}
SYNOPSIS: ${viper.meta.synopsis}
CHARACTERS: ${viper.meta.charaters}
STAFF: ${viper.meta.staffs}`,
        viper.meta.image
      );
    });
  } catch (error) {
    return Í™ú·¥èx ô·¥è·¥õ.grab(Í™ú·¥èx ô·¥è·¥õ, ·¥†·¥èx·¥Ñ, error);
  }
};
