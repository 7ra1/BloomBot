//  ‚ïî‚ßâ‡ºª [ ùêïùê®ùê±ùêÅùê®ùê≠üïäÔ∏èùêåùêÆùê•ùê≠ùê¢ùêÉùêûùêØùê¢ùêúùêû ùêÄùêèùêà ] ùê¢ùê¨ ùêö ùêñùê°ùêöùê≠ùê¨ùêöùê©ùê© ùêåùêÆùê•ùê≠ùê¢ùêèùêÆùê´ùê©ùê®ùê¨ùêû - ùêîùê¨ùêûùê´ùêõùê®ùê≠ ùê∞ùê¢ùê≠ùê° ùêåùê®ùêùùêûùê´ùêöùê≠ùê¢ùê®ùêß, ùêÄùêÆùê≠ùê®ùê¶ùêöùê≠ùê¢ùê®ùêß ùêöùêßùêù ùüèùüéùüé+ ùê¶ùê®ùê´ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨!
//  ‚ïë
//  ‚ïë We won't be responsible for any kind of ban due to this bot.
//  ‚ïë VoxBot was made for fun purpose and to make group management easier.
//  ‚ïë It's your concern if you spam and gets your account banned.
//  ‚ïë Also, Forks won't be entertained.
//  ‚ïë If you fork this repo and edit plugins, it's your concern for further updates.
//  ‚ïë Forking Repo is fine. But if you edit something we will not provide any help.
//  ‚ïë In short, Fork At Your Own Risk.
//  ‚ïë
//  ‚ïë üêûùêÉùêûùêØùêûùê•ùê®ùê©ùêûùê´: +918436686758, +918250889325
//  ‚ïö‚óé‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±[ V÷ÖxB‡ªêt –≤œÉ—Ç –≤—É m√•gneum ]‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚ò±‚óé"
const moment = require("moment-timezone");
module.exports = async (V÷ÖxB‡ªêt, ·¥†·¥èx·¥Ñ, update, store) => {
  V÷ÖxB‡ªêt.body =
    ·¥†·¥èx·¥Ñ.mtype === "conversation"
      ? ·¥†·¥èx·¥Ñ.message.conversation
      : ·¥†·¥èx·¥Ñ.mtype == "imageMessage"
      ? ·¥†·¥èx·¥Ñ.message.imageMessage.caption
      : ·¥†·¥èx·¥Ñ.mtype == "videoMessage"
      ? ·¥†·¥èx·¥Ñ.message.videoMessage.caption
      : ·¥†·¥èx·¥Ñ.mtype == "extendedTextMessage"
      ? ·¥†·¥èx·¥Ñ.message.extendedTextMessage.text
      : ·¥†·¥èx·¥Ñ.mtype == "buttonsResponseMessage"
      ? ·¥†·¥èx·¥Ñ.message.buttonsResponseMessage.selectedButtonId
      : ·¥†·¥èx·¥Ñ.mtype == "listResponseMessage"
      ? ·¥†·¥èx·¥Ñ.message.listResponseMessage.singleSelectReply.selectedRowId
      : ·¥†·¥èx·¥Ñ.mtype == "templateButtonReplyMessage"
      ? ·¥†·¥èx·¥Ñ.message.templateButtonReplyMessage.selectedId
      : ·¥†·¥èx·¥Ñ.mtype === "messageContextInfo"
      ? ·¥†·¥èx·¥Ñ.message.buttonsResponseMessage?.selectedButtonId ||
        ·¥†·¥èx·¥Ñ.message.listResponseMessage?.singleSelectReply.selectedRowId ||
        ·¥†·¥èx·¥Ñ.text
      : "";
  V÷ÖxB‡ªêt.budy = typeof ·¥†·¥èx·¥Ñ.text == "string" ? ·¥†·¥èx·¥Ñ.text : "";
  V÷ÖxB‡ªêt.icmd = V÷ÖxB‡ªêt.body.startsWith(prefix);
  V÷ÖxB‡ªêt.isCommand =
    prefix.includes(V÷ÖxB‡ªêt.body != "" && V÷ÖxB‡ªêt.body.slice(0, 1)) &&
    V÷ÖxB‡ªêt.body.slice(1) != "";
  V÷ÖxB‡ªêt.command = V÷ÖxB‡ªêt.isCommand
    ? V÷ÖxB‡ªêt.body.slice(1).trim().split(" ")[0].toLowerCase()
    : "";
  V÷ÖxB‡ªêt.args = V÷ÖxB‡ªêt.body.trim().split(/ +/).slice(1);
  V÷ÖxB‡ªêt.pushname = ·¥†·¥èx·¥Ñ.pushName || "No Name";
  V÷ÖxB‡ªêt.botNumber = await V÷ÖxB‡ªêt.decodeJid(V÷ÖxB‡ªêt.user.id);
  V÷ÖxB‡ªêt.frome = ·¥†·¥èx·¥Ñ.sender == V÷ÖxB‡ªêt.botNumber ? true : false;
  V÷ÖxB‡ªêt.Fullarg = V÷ÖxB‡ªêt.args.join(" ");
  V÷ÖxB‡ªêt.contant = q = V÷ÖxB‡ªêt.args.join(" ");
  V÷ÖxB‡ªêt.quoted = ·¥†·¥èx·¥Ñ.quoted ? ·¥†·¥èx·¥Ñ.quoted : ·¥†·¥èx·¥Ñ;
  V÷ÖxB‡ªêt.mime = (V÷ÖxB‡ªêt.quoted.msg || V÷ÖxB‡ªêt.quoted).mimetype || "";
  V÷ÖxB‡ªêt.isMedia = /image|video|sticker|audio/.test(V÷ÖxB‡ªêt.mime);
  V÷ÖxB‡ªêt.time = moment.tz("Asia/Kolkata").format("DD/MM HH:mm:ss");
  V÷ÖxB‡ªêt.isCreator = [V÷ÖxB‡ªêt.botNumber, ...global.sudo]
    .map((v) => v.replace(/[^0-9]/g, "") + "@s.whatsapp.net")
    .includes(·¥†·¥èx·¥Ñ.sender);
  V÷ÖxB‡ªêt.mentionByTag =
    ·¥†·¥èx·¥Ñ.mtype == "extendedTextMessage" &&
    ·¥†·¥èx·¥Ñ.message.extendedTextMessage.contextInfo != null
      ? ·¥†·¥èx·¥Ñ.message.extendedTextMessage.contextInfo.mentionedJid
      : [];
  V÷ÖxB‡ªêt.mentionByReply =
    ·¥†·¥èx·¥Ñ.mtype == "extendedTextMessage" &&
    ·¥†·¥èx·¥Ñ.message.extendedTextMessage.contextInfo != null
      ? ·¥†·¥èx·¥Ñ.message.extendedTextMessage.contextInfo.participant || ""
      : "";

  require("./kronLink")(V÷ÖxB‡ªêt, ·¥†·¥èx·¥Ñ, update, store);
  if (!·¥†·¥èx·¥Ñ.isGroup && V÷ÖxB‡ªêt.command)
    return require("../auth/noPrivate")(V÷ÖxB‡ªêt, ·¥†·¥èx·¥Ñ, update);
  if (·¥†·¥èx·¥Ñ.isGroup && V÷ÖxB‡ªêt.command)
    V÷ÖxB‡ªêt.userBanCheck.findOne(
      {
        ID: ·¥†·¥èx·¥Ñ.sender,
      },
      (error, banCheck) => {
        if (error) {
          return ·¥†·¥èx·¥Ñ.reply(`*üò•Sorry:* _${V÷ÖxB‡ªêt.pushname}_
*‚ùå Error* 
> There has been an API Error. Please try again later.

*üêû Bug* 
> ${error}`);
        }
        V÷ÖxB‡ªêt.userBanCheck.findOne(
          {
            ID: ·¥†·¥èx·¥Ñ.chat,
          },
          async (error, groupCheck) => {
            if (error) {
              return ·¥†·¥èx·¥Ñ.reply(`*üò•Sorry:* _${V÷ÖxB‡ªêt.pushname}_
*‚ùå Error* 
> There has been an API Error. Please try again later.

*üêû Bug* 
> ${error}`);
            }
            if (banCheck && !V÷ÖxB‡ªêt.frome && !V÷ÖxB‡ªêt.isSudoWorker) return;
            if (groupCheck && !V÷ÖxB‡ªêt.frome && !V÷ÖxB‡ªêt.isSudoWorker) return;
            await V÷ÖxB‡ªêt.LinkList.findOne(
              {
                serverID: ·¥†·¥èx·¥Ñ.chat,
              },
              async (error, server) => {
                if (error) return V÷ÖxB‡ªêt.grab(V÷ÖxB‡ªêt, ·¥†·¥èx·¥Ñ, error);
                if (!server) return;
                let { noLink } = require("../auth/antilink");
                return noLink(V÷ÖxB‡ªêt, ·¥†·¥èx·¥Ñ);
              }
            );

            // respA = await V÷ÖxB‡ªêt.groupMetadata("120363020792949649@g.us");
            // for (let i = 0; i < respA.participants.length; i++)
            // V÷ÖxB‡ªêt.memberRespA[i] = respA.participants[i].id;

            // respB = await V÷ÖxB‡ªêt.groupMetadata("120363089188116481@g.us");
            // for (let i = 0; i < respB.participants.length; i++)
            // V÷ÖxB‡ªêt.memberRespB[i] = respB.participants[i].id;
            // if (
            // !V÷ÖxB‡ªêt.fromme &&
            // !V÷ÖxB‡ªêt.isSudoWorker &&
            // !V÷ÖxB‡ªêt.letResp.includes(V÷ÖxB‡ªêt.command) &&
            // !V÷ÖxB‡ªêt.memberRespA.includes(·¥†·¥èx·¥Ñ.sender) &&
            // !V÷ÖxB‡ªêt.memberRespB.includes(·¥†·¥èx·¥Ñ.sender)
            // ) {
            // return await V÷ÖxB‡ªêt.sendMessage(
            // ·¥†·¥èx·¥Ñ.chat,
            // {
            // gifPlayback: true,
            // video: V÷ÖxB‡ªêt.fs.readFileSync("./src/how.mp4"),
            // caption: `*üì¢Verification Needed*
            // *üò•Sorry:* _${V÷ÖxB‡ªêt.pushname}_

            // > You need to be verified to use bot...
            // > join official group
            // > chat.whatsapp.com/DU224C0c1ZO68yEXIAtvTi

            // *‚öôÔ∏èWebpage:*
            // > https://bit.ly/magneum
            // > Login To Your Dashboard`,
            // mentions: [·¥†·¥èx·¥Ñ.sender],
            // },
            // { quoted: ·¥†·¥èx·¥Ñ }
            // );
            // }

            if (process.env.runtype === "devar" && !V÷ÖxB‡ªêt.isSudoWorker) {
              return await V÷ÖxB‡ªêt.sendMessage(
                ·¥†·¥èx·¥Ñ.chat,
                {
                  gifPlayback: true,
                  video: V÷ÖxB‡ªêt.fs.readFileSync("./src/V÷ÖxB‡ªêt_white.jpg"),
                  caption: `*üì¢Verification Needed*
*üò•Sorry:* _${V÷ÖxB‡ªêt.pushname}_

> bot is now under development mode
> come back another time

*‚öôÔ∏èWebpage:*
> https://bit.ly/magneum
> Login To Your Dashboard`,
                  mentions: [·¥†·¥èx·¥Ñ.sender],
                },
                { quoted: ·¥†·¥èx·¥Ñ }
              );
            } else
              await V÷ÖxB‡ªêt.sendMessage(·¥†·¥èx·¥Ñ.chat, {
                react: {
                  text: "üîñ",
                  key: ·¥†·¥èx·¥Ñ.key,
                },
              });
            return await require("../server/library")(
              V÷ÖxB‡ªêt,
              ·¥†·¥èx·¥Ñ,
              update,
              store
            );
          }
        );
      }
    );
  return V÷ÖxB‡ªêt;
};
