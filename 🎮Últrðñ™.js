const { MessageType, Mimetype } = require(`@adiwajshing/baileys`);
const ·¥ã Ä·¥Ä·¥ã…™…¥·¥¢·¥ã·¥è…¥ = require(`./∆à è”Ñ÷Ö’º/sessionString`);
const Welcmr = require(`./√öltr√∞√±/wlcmr`);
const config = require(`./√öltr√∞√±/config`);
const √öltr√∞√±Sudo = [`block`, `unblock`];
const Users = require(`./√öltr√∞√±/user`);
const wa = require(`./∆à è”Ñ÷Ö’º/helper`);
const Cyborgsql = config.POSTQL;
const Kolor = require(`chalk`);
const fs = require(`fs`);
var ”Ñ Ä«ü”Ñ…®’º ê = ·¥ã Ä·¥Ä·¥ã…™…¥·¥¢·¥ã·¥è…¥.WhatsApp;
async function CyborgRunner() {
  ”Ñ Ä«ü”Ñ…®’º ê.logger.level = `error`;
  var commandHandler = new Map();
  try {
    var session = ·¥ã Ä·¥Ä·¥ã…™…¥·¥¢·¥ã·¥è…¥.restoreSession(config.ULTRON);
    ”Ñ Ä«ü”Ñ…®’º ê.loadAuthInfo(session);
  } catch (c·¥á Ä Ä·¥è Ä) {
    if (
      c·¥á Ä Ä·¥è Ä instanceof TypeError ||
      c·¥á Ä Ä·¥è Ä.message === `given authInfo is null` ||
      c·¥á Ä Ä·¥è Ä instanceof SyntaxError
    ) {
      console.log(
        Kolor.redBright.bold(
          `Incorrect Session String. Please authenticate again!`
        )
      );
      fs.writeFileSync(`./√öltr√∞√±.env`, `ULTRON=```);
      process.exit(0);
    } else {
      console.log(
        Kolor.redBright.bold(`SOMETHING WENT WRONG.\n`),
      );
      process.exit(0);
    }
  }
  // ‚ò¢Ô∏è================================================================================‚ò¢Ô∏è
  ”Ñ Ä«ü”Ñ…®’º ê.on(`connecting`, async () => {
    console.clear();
    console.log(
      Kolor.yellowBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  ùòäùò∞ùòØùòØùò¶ùò§ùòµùò™ùòØùò® ùòµùò∞ ùòûùò©ùò¢ùòµùò¥ùòàùò±ùò±...ü§ñ`)
    );
  });
  // ‚ò¢Ô∏è================================================================================‚ò¢Ô∏è
  ”Ñ Ä«ü”Ñ…®’º ê.on(`open`, async () => {
    console.log(
      Kolor.yellowBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  ùòäùò∞ùòØùòØùò¶ùò§ùòµùò™ùòØùò® ùòµùò∞ ùòãùò¢ùòµùò¢ùò£ùò¢ùò¥ùò¶...‚úÖ`)
    );
    try {
      await Cyborgsql.authenticate();
    } catch (error) {
      console.error(`‚ß™·¥á Ä Ä·¥è Ä‚ùå‚¨∞ Unable to connect to the database:`, error);
    }
    console.log(
      Kolor.yellowBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  ùòöùò∫ùòØùò§ùò™ùòØùò® ùòãùò¢ùòµùò¢ ùò∏ùò™ùòµùò© ùòèùò∞ùò¥ùòµ...‚úÖ`)
    );
    await Cyborgsql.sync();
    console.log(Kolor.yellowBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  ùòêùòØùò¥ùòµùò¢ùò≠ùò≠ùò™ùòØùò® ùòóùò≠ùò∂ùò®ùò™ùòØùò¥...‚úÖ`));
    const Folders = fs.readdirSync(`./√öltr√∞√±_‚Ñåùî¶ùî≥ùî¢`);
    for (const folder of Folders) {
      const commandFiles = fs
        .readdirSync(`./√öltr√∞√±_‚Ñåùî¶ùî≥ùî¢/${folder}`)
        .filter((file) => file.endsWith(`.js`));
      for (const file of commandFiles) {
        const command = require(`./√öltr√∞√±_‚Ñåùî¶ùî≥ùî¢/${folder}/${file}`);
        commandHandler.set(command.name, command);
        console.log(
          Kolor.yellowBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  `),
          Kolor.greenBright.bold(command.name.toUpperCase()),
          Kolor.whiteBright.bold(command.description.toLowerCase())
        );
      }
    }
    console.log(
      Kolor.yellowBright.bold(
        `=================üòà    |  √öltr√∞√±  |    üòà=================`
      ),
      Kolor.yellowBright.bold(
        `\n=================üòà    |  √öltr√∞√±  |    üòà=================`
      )
    );
  });
  await ”Ñ Ä«ü”Ñ…®’º ê.connect();
  ”Ñ Ä«ü”Ñ…®’º ê.on(`group-participants-update`, async (update) => {
    console.log(
      `------------------- GROUP PARTICIPANT UPDATE -------------------`
    );
    console.log(update.participants);
    console.log(update.action);
    console.log(update.jid);
    var groupId = update.jid;
    try {
      if (update.action === `add`) {
        var enable = await Welcmr.checkSettings(groupId, `welcome`);
        if (enable === false || enable === `OFF`) {
          return;
        }
        var Msg = await Welcmr.getMessage(groupId, `welcome`);
        ”Ñ Ä«ü”Ñ…®’º ê.sendMessage(groupId, Msg.message, MessageType.text);
        return;
      } else if (update.action === `remove`) {
        var enable = await Welcmr.checkSettings(groupId, `goodbye`);
        if (enable === false || enable === `OFF`) {
          return;
        }
        var Msg = await Welcmr.getMessage(groupId, `goodbye`);

        ”Ñ Ä«ü”Ñ…®’º ê.sendMessage(groupId, Msg.message, MessageType.text);
        return;
      }
    } catch (c·¥á Ä Ä·¥è Ä) {
      console.log(`Greeting message are off`);
    }
  });
  // ‚ò¢Ô∏è================================================================================‚ò¢Ô∏è
  ”Ñ Ä«ü”Ñ…®’º ê.on(`chat-update`, async (chat) => {
    if (!chat.hasNewMessage) return;
    if (!chat.messages) return;
    chat = chat.messages.all()[0];
    var sender = chat.key.remoteJid;
    const groupMetadata = sender.endsWith(`@g.us`)
      ? await ”Ñ Ä«ü”Ñ…®’º ê.groupMetadata(sender)
      : ``;
    var √öltr√∞√± = wa.resolve(chat, ”Ñ Ä«ü”Ñ…®’º ê, groupMetadata);
    const √öltr√∞√±Rights = [
      `add`,
      `demote`,
      `invite`,
      `mute`,
      `promote`,
      `remove`,
      `unmute`,
      `welcome`,
      `disappear`,
      `goodbye`,
      `setdp`,
      `tagall`,
      // Below are NSFW Commands!
      `ass`,
      `bdsm`,
      `blowjob`,
      `cum`,
      `doujin`,
      `feet`,
      `femdom`,
      `foxgirl`,
      `glasses`,
      `hentai`,
      `maid`,
      `masturbation`,
      `netorare`,
      `orgy`,
      `panties`,
      `pussy`,
      `school`,
      `tentacles`,
      `thighs`,
      `uniform`,
      `yuri`,
    ];
    if (√öltr√∞√±.isCmd && !√öltr√∞√±.fromMe && !√öltr√∞√±.isSenderSUDO) {
      if (config.PRIVACY === `public`) {
        if (
          √öltr√∞√±Rights.indexOf(√öltr√∞√±.commandName) >= 0 &&
          !√öltr√∞√±.isSenderGroupAdmin
        ) {
          console.log(
            Kolor.redBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  √öltr√∞√±Rights `),
            Kolor.greenBright.bold(`${√öltr√∞√±.commandName}`),
            Kolor.redBright.bold(`not executed in public Work Type.`)
          );
          return ”Ñ Ä«ü”Ñ…®’º ê.sendMessage(
            √öltr√∞√±.chatId,
            `You need to be an admin to execute this command.`,
            MessageType.text
          );
        } else if (
          √öltr√∞√±Sudo.indexOf(√öltr√∞√±.commandName) >= 0 &&
          !√öltr√∞√±.isSenderSUDO
        ) {
          console.log(
            Kolor.redBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  sudo commmand `),
            Kolor.greenBright.bold(`${√öltr√∞√±.commandName}`),
            Kolor.redBright.bold(`not executed in public Work Type.`)
          );
          var messageSent = await Users.getUser(√öltr√∞√±.chatId);
          if (messageSent) {
            return console.log(
              Kolor.blue(
                `‚ß™…™…¥Íú∞·¥èüí°‚¨∞  Promo message had already been sent to ` +
                  √öltr√∞√±.chatId
              )
            );
          } else {
            await Users.addUser(√öltr√∞√±.chatId);
            return ”Ñ Ä«ü”Ñ…®’º ê.sendMessage(
              √öltr√∞√±.chatId,
              `√öltr√∞√± is Alive!.
I guess you were trying to use my commands in *${√öltr√∞√±.groupName}*. However, the bot is currently in ${worktype} mode. This enables only the owner and sudo users to use the command *${commandName}* .
If you are keen to use my features, you can deploy √öltr√∞√± on your own account without much effort, in less than 5 minutes! Check out the links given below.`,
              {
                worktype: `public`,
                groupName: √öltr√∞√±.groupName ? √öltr√∞√±.groupName : `private chat`,
                commandName: √öltr√∞√±.commandName,
              },
              MessageType.text,
              {
                contextInfo: {
                  stanzaId: chat.key.id,
                  participant: √öltr√∞√±.sender,
                  quotedMessage: {
                    conversation: √öltr√∞√±.body,
                  },
                },
              }
            );
          }
        }
      } else if (config.PRIVACY === `private` && !√öltr√∞√±.isSenderSUDO) {
        console.log(
          Kolor.redBright.bold(`‚ß™…™…¥Íú∞·¥èüí°‚¨∞  commmand `),
          Kolor.greenBright.bold(`${√öltr√∞√±.commandName}`),
          Kolor.redBright.bold(`not executed in private Work Type.`)
        );
        var messageSent = await Users.getUser(√öltr√∞√±.chatId);
        if (messageSent) {
          return console.log(
            Kolor.blue(
              `‚ß™…™…¥Íú∞·¥èüí°‚¨∞  Promo message had already been sent to ` +
                √öltr√∞√±.chatId
            )
          );
        } else {
          await Users.addUser(√öltr√∞√±.chatId);
          return ”Ñ Ä«ü”Ñ…®’º ê.sendMessage(
            √öltr√∞√±.chatId,
            `√öltr√∞√± is Alive!.
I guess you were trying to use my commands in *${√öltr√∞√±.groupName}*. However, the bot is currently in ${worktype} mode. This enables only the owner and sudo users to use the command *${commandName}* .
If you are keen to use my features, you can deploy √öltr√∞√± on your own account without much effort, in less than 5 minutes! Check out the links given below.`,
            {
              worktype: `private`,
              groupName: √öltr√∞√±.groupName ? √öltr√∞√±.groupName : `private chat`,
              commandName: √öltr√∞√±.commandName,
            },
            MessageType.text,
            {
              contextInfo: {
                stanzaId: chat.key.id,
                participant: √öltr√∞√±.sender,
                quotedMessage: {
                  conversation: √öltr√∞√±.body,
                },
              },
            }
          );
        }
      }
    }
    if (√öltr√∞√±.isCmd) {
      console.log(
        Kolor.redBright.bold(
          `‚ß™…™…¥Íú∞·¥èüí°‚¨∞  ${√öltr√∞√±.commandName.toUpperCase()} command executed.`
        )
      );
      const command = commandHandler.get(√öltr√∞√±.commandName);
      var arguments = √öltr√∞√±.body.trim().split(/\s+/).slice(1);
      if (!command) {
        return ”Ñ Ä«ü”Ñ…®’º ê.sendMessage(
          √öltr√∞√±.chatId,
          {
            url: `https://i.postimg.cc/KcNwHtZt/ltr.png`,
          },
          MessageType.image,
          {
            mimetype: Mimetype.png,
            caption: `_*Invalid √öltr√∞√± Command!*_

*Use  any of these prefix .?!*
*like:* _?help_`,
          }
        );
      } else if (command && √öltr√∞√±.commandName == `help`) {
        try {
          command.handle(”Ñ Ä«ü”Ñ…®’º ê, chat, √öltr√∞√±, arguments, commandHandler);
          return;
        } catch (c·¥á Ä Ä·¥è Ä) {
          console.log(Kolor.redBright.bold(`‚ß™·¥á Ä Ä·¥è Ä‚ùå‚¨∞ `, c·¥á Ä Ä·¥è Ä));
          return;
        }
      }
      try {
        command
          .handle(”Ñ Ä«ü”Ñ…®’º ê, chat, √öltr√∞√±, arguments)
          .catch((c·¥á Ä Ä·¥è Ä) => console.log(`‚ß™·¥á Ä Ä·¥è Ä‚ùå‚¨∞ ` + c·¥á Ä Ä·¥è Ä));
      } catch (c·¥á Ä Ä·¥è Ä) {
        console.log(Kolor.redBright.bold(`‚ß™·¥á Ä Ä·¥è Ä‚ùå‚¨∞ `, c·¥á Ä Ä·¥è Ä));
      }
    }
  });
}
CyborgRunner().catch((c·¥á Ä Ä·¥è Ä) =>
  console.log(`‚ß™·¥á Ä Ä·¥è Ä‚ùå‚¨∞ : %s`, Kolor.redBright.bold(c·¥á Ä Ä·¥è Ä))
);
